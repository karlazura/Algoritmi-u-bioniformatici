#!/usr/bin/env python3

"""
A solution to a ROSALIND bioinformatics problem.
Problem Title: Find All Approximate Occurrences of a Pattern in a String
Rosalind ID: BA1H
URL: http://rosalind.info/problems/ba1h
"""


def rosalindprint(res):
    text = ""
    for i in res:
        text = text + " " + str(i)
    return(text.strip())


def kmerspositions(text, k):
    D = dict()
    for i in range(0, len(text) - k + 1):
        tmp = text[i:(i+k)]
        try:
            D[tmp].append(i)
        except KeyError:
            D[tmp] = [i]
    return(D)


def HammingDistance(p, q):
    """Computes the hamming distance between strings p and q"""
    if len(p) != len(q):
        return -1

    dist = 0
    for first, second in zip(p, q):
        if first != second:
            dist = dist + 1

    return dist


def ApproximatePatternMatching(text, pattern, d):
    """Find All Approximate Occurrences of a Pattern in a String"""
    D = kmerspositions(text, len(pattern))
    L = list()
    #D.items() returns key and all its indicis
    #list.extend(list2) adds elements from list2 to list
    [L.extend(value) for key, value in D.items() if HammingDistance(key, pattern) <= d]
    return(sorted(L))



if __name__ == '__main__':
    x = '''ATTCTGGA
CGCCCGAATCCAGAACGCATTCCCATATTTCGGGACCACTGGCCTCCACGGTACGGACGTCAATCAAATGCCTAGCGGCTTGTGGTTTCTCCTACGCTCC
3'''
    inlines = x.split()
    pattern = inlines[0]
    text = inlines[1]
    d = inlines[2]
    d = int(d)
